require('math')

-- Constant values
local q = 1.6e-19 -- elementary charge
local k = 1.38e-23 -- Boltzmann constant
local T_r = 25 + 273.15 -- degrees C

-- Datasheet values
local A     = 1.2 -- Ideality factor
local n_p   = 60 -- Amount of PV cells in PV module
local i_sc  = 8.49 -- short circuit current (A)
local alpha = 6 -- mA / C
local T     = 25 + 273.15 -- degrees C
local S     = 1000 -- solar irradiance
local v_oc  = 37.5 -- open circuit voltage of PV module (V) 

-- Calculated values
v_oc = v_oc / n_p -- open circuit voltage of PV Cell (V) 
local i_rr = math.exp(math.log(i_sc) - v_oc * q / (A * k * T))
local E_g  = 1.16 - 7.02e-4 * (T ^ 2) / (T - 1108)
local i_rs = i_rr * (T / T_r) ^ 3 * math.exp(q * E_g / (k * A) * (1 / T_r - 1 / T))
local n_s  = n_p
local i_ph = (i_sc + alpha * (T - T_r)) * S / 1e3 -- Photovoltaic current source

-- Array declaration
local i: [50000]number; local p: [50000]number; local v: [50000]number

-- Generate values for a range of the equation
local index = 1
local it_step: uint32 = math.floor(v_oc)
for v_p=0,52,it_step do
    local i_calc = i_ph - i_rs * (math.exp(q * v_p / (A * k * T * n_s)) - 1)
	if i_calc >= 0 then
    	i[index] = i_calc
	    p[index] = i_calc * v_p
	    v[index] = v_p
	    index = index + 1
	else
	    break
	end
end

-- Print generated values of current and power
for val=1,10 do
	print(i[val])
end
for val=1,10 do
	print(p[val])
end
for val=1,10 do
	print(v[val])
end
